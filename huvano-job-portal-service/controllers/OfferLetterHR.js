const { revokeOfferEmail } = require("../mails/offerRevokeEmail")
const ApplicationModel = require("../models/Application.model")
const HRProfile = require("../models/Hr.model")
const OfferLetter = require("../models/OfferLetter.model")
const mailSender = require("../utils/mailSender")

// Controller for creating the offer letter
exports.createOfferLetter = async (req, res) => {
    try {
        const user = req.user

        if(!user || user.role !== "HR") {
            return res.status(403).json({
                success: false,
                message: "Unauthorized Access: Only HR can perform this action"
            })
        }
        const applicationId = req.params.applicationId
        const application = await ApplicationModel.findById(applicationId).populate("jobId").populate("candidateId")

        if(!application) {
            return res.status(404).json({
                success: false,
                message: "No Application Found"
            })
        }

        const latestInterview = application.interviews[application.interviews.length - 1]
        
        if(!latestInterview || latestInterview.result !== "Selected"){
            return res.status(400).json({
                success: false,
                message: "Candidate is not selected for this Job"
            })
        }

        const {content} = req.body
        if(!content || content.trim().length < 200 || content.trim().length > 600) {
            return res.status(400).json({
                success: false,
                message: "Content of offer letter should be between 200 characters to 600 characters"
            })
        }

        const offerLetter = await OfferLetter.create({
            candidateId: application?.candidateId?._id,
            jobId: application?.jobId?._id,
            applicationId,
            content,
            issuedBy: user._id,
            issuedAt: new Date()
        })

        return res.status(200).json({
            success: false,
            message: "Offer Letter Created Successfully",
            offerLetter
        })

    } catch (error) {
        console.log("Error while creating offer letter: ", error)
        return res.status(500).json({
            success: false,
            message: "Something while creating the offer letter"
        })
    }
}

// Controller for fetching all the offer letters generated by HR
exports.fetchingOfferLetters = async (req, res) => {
    try {
        const{page=1, limit=10} = req.query
        const pageNum = parseInt(page, 10)
        const limitNum = parseInt(limit, 10)

        if(isNaN(pageNum) || isNaN(limitNum) || pageNum < 1 || limitNum < 1) {
            return res.status(400).json({
                success: false,
                message: "Invalid Pagination Inputs"
            })
        }
        const user = req.user
        if(!user || user.role !== "HR") {
            return res.status(403).json({
                success: false,
                message: "Unathorized Access: Only HRs can perform this action"
            })
        }

        const skip = (pageNum - 1) * limitNum
        const hrId = user._id
        const offerLetters = await OfferLetter.find({issuedBy: hrId}).skip(skip).limit(limitNum).sort({ createdAt: -1})
        const totalOffers = await OfferLetter.countDocuments({issuedBy: hrId})

        if(offerLetters.length === 0) {
            return res.status(404).json({
                success: false,
                message: "No offer letter generated found"
            })
        }

        return res.status(200).json({
            success: true,
            message: "Offer Letters fetched successfully",
            totalOffers,
            currentPage: pageNum,
            limit: limitNum,
            totalPages: Math.ceil(totalOffers / limitNum),
            offerLetters
        })
    } catch (error) {
        console.log("Error fetching all the offer letters: ", error)
        return res.status(500).json({
            success: false,
            message: "Something went wrong fetching the offer letters: Please try again"
        })
    }
}

// Controller to get a particular offer letter using offer letter Id
exports.getParticularOffer = async (req, res) => {
    try {
        const user = req.user
        if(!user || user.role !== "HR") {
            return res.status(403).json({
                success: false,
                message: "Unathorized Access: Only HRs can perform this action"
            })
        }

        const offerLetterId = req.params.offerLetterId
        const offerLetter = await OfferLetter.findById(offerLetterId)
            .populate("candidateId", "name email")
            .populate("jobId", "title location")
            .populate("applicationId", "_id");

        if (offerLetter.issuedBy.toString() !== user._id.toString()) {
            return res.status(403).json({
                success: false,
                message: "Access Denied: This offer letter was not issued by you"
            });
        }

        if(!offerLetter) {
            return res.status(404).json({
                success: false,
                message: "No Offer Letter Generated"
            })
        }

        return res.status(200).json({
            success: true,
            message: "Offer Letter Fetched Successfully",
            offerLetter
        })

    } catch (error) {
        console.log("Error while fetching particular offer letter: ", error)
        return res.status(500).json({
            success: false,
            message: "Something went wrong fetching the offer letter"
        })
    }
}

// Controller to update a offer letter
exports.updateOfferLetter = async (req, res) => {
    try {
        const user = req.user
        if(!user || user.role !== "HR") {
            return res.status(403).json({
                success: false,
                message: "Unauthroized Access: Only HRs allowed"
            })
        }
        const offerLetterId = req.params.offerLetterId
        const offerLetter = await OfferLetter.findById(offerLetterId)

        if(!offerLetter) {
            return res.status(404).json({
                success: false,
                message: "Offer Letter not found"
            })
        }

        if(offerLetter.issuedBy.toString() !== user._id){
            return res.status(403).json({
                success: false,
                message: "Unauthorized, only HR who issued can update the offer letter"
            })
        }

        const {content} = req.body
        const trimmedContent = content?.trim()
        if(!trimmedContent || !trimmedContent.length < 200 || !trimmedContent.length > 400) {
            return res.status(400).json({
                success: false,
                message: "Content should be between 200 to 400 characters long"
            })
        }

        offerLetter.content = content
        offerLetter.issuedAt = new Date()
        await offerLetter.save()

        return res.status(200).json({
            success: true,
            message: "Offer Letter Updated Successfully"
        })

    } catch (error) {
        console.log("Error while updating the offer letter: ", error)
        return res.status(500).json({
            success: false,
            message: "Something went wrong updating the offer letter"
        })
    }
}

// Controller to delete / revoke the offer
exports.revokeOffer = async (req, res) => {
    try {
        const user = req.user
        if(!user || user.role !== "HR") {
            return res.status(403).json({
                success: false,
                message: "Unauthorized Access: Only HRs can access this"
            })
        }
        const offerLetterId = req.params.offerLetterId
        const offerLetter = await OfferLetter.findById(offerLetterId).populate({
            path: "applicationId",
            populate: {
                path: 'jobId',
                select: 'title'
            }
        })

        if(!offerLetter) {
            return res.status(404).json({
                success: false,
                message: "Offer Letter Not Found"
            })
        }

        if(offerLetter.issuedBy.toString() !== user._id) {
            return res.status(403).json({
                success: false,
                message: "Unauthroized Access: Only issuing HR can revoke the offer"
            })
        }

        if(offerLetter.status === "Revoked" || offerLetter.status === "Declined") {
            return res.status(400).json({
                success: false,
                message: "Offer Letter already Revoked or Declined"
            })
        }

        offerLetter.status = "Revoked"
        await offerLetter.save()

        try {
            const emailResponse = await mailSender(
                offerLetter?.applicationId?.myInformation?.emailAddress,
                "Offer Revoked",
                revokeOfferEmail(
                    offerLetter?.applicationId?.myInformation?.firstName,
                    offerLetter?.applicationId?.jobId?.title,
                    "Huvano HRMS",
                    offerLetter.issuedBy.firstName,
                    offerLetter.issuedBy.email
                )
            )

            console.log("Email Response || Offer Revokation: ", emailResponse)
            
        } catch (err) {
            console.log("Error while sending the offer revoke mail", err)
            return res.status(500).json({
                success: false,
                message: "Something went wrong sending the mail. Please try again later"
            })
        }

        return res.status(200).json({
            success: true,
            message: "Offer Revoked Successfully"
        })

    } catch (error) {
        console.log("Error while revoking the offer letter: ", error)
        return res.status(500).json({
            success: false,
            message: "Something went wrong while revoking the offer"
        })
    }
}